// ==UserScript==
// @name         MooMoo.io Macros
// @namespace    https://greasyfork.org/en/users/1064285-vcrazy-gaming
// @version      0.1
// @description  Enables macros for MooMoo.io: F -> Place Trap/Boost Pad, V -> Place Spike, Q -> Place Food, N -> Place Mill, H -> Place Turret
// @author       _VcrazY_
// @match        *://*.moomoo.io/*
// @icon         https://moomoo.io/img/favicon.png?v=1
// @require https://greasyfork.org/scripts/423602-msgpack/code/msgpack.js?version=1005014
// @run-at       document-start
// @grant        unsafeWindow
// @license      MIT
// ==/UserScript==
(() => {
  // Constants and Variables
  window.onbeforeunload = null;
  let items = [];
  let mouseX,
    mouseY,
    weapons = [],
    width,
    height;
  let coreURL = new URL(window.location.href);
  window.sessionStorage.force = coreURL.searchParams.get("fc");
  let ws,
    msgpack5 = window.msgpack;
  const inventory = {
    primary: null,
    secondary: null,
    food: null,
    wall: null,
    spike: null,
    mill: null,
    mine: null,
    boostPad: null,
    trap: null,
    turret: null,
    spawnpad: null
  };
  const myPlayer = {
    sid: null,
    x: null,
    y: null,
    dir: null,
    buildIndex: null,
    weaponIndex: null,
    weaponVariant: null,
    team: null,
    isLeader: null,
    skinIndex: null,
    tailIndex: null,
    iconIndex: null
  };

  // Helper Functions
  /**
   * Utility function to join arrays
   * @param {Array} message - The array to join
   * @returns {Array} - Joined array
   */
  const join = message => Array.isArray(message) ? [...message] : [...message];

  /**
   * Hook function for WebSocket
   * @param {object} data - WebSocket message
   */
  const hookWS = data => {
    // PARSE MESSAGE:
    let tmpData = msgpack5.decode(new Uint8Array(data.data));
    if ((data = undefined) || (tmpData = (data = tmpData.length > 1 ? [tmpData[0], ...join(tmpData[1])] : tmpData)[0]) || data) {
      let addEventListener = {
        "setupGame": "C",
        "updateItems": "V"
      };

      // CALL EVENT:
      if ("io-init" == tmpData) {
        let gameCanvas = document.getElementById("gameCanvas");
        width = gameCanvas.clientWidth;
        height = gameCanvas.clientHeight;
        document.getElementById(window).resize(function () {
          width = gameCanvas.clientWidth;
          height = gameCanvas.clientHeight;
        });
        gameCanvas.addEventListener("mousemove", f => {
          mouseX = f.clientX;
          mouseY = f.clientY;
        });
      }

      // SETUP GAME:
      if (addEventListener.setupGame == tmpData && null === myPlayer.sid) {
        myPlayer.sid = data[1];
        items = [0, 3, 6, 10];
        weapons = [0];
      }
      // UPDATE ITEMS:
      if (addEventListener.updateItems == tmpData) {
        if (data[1]) {
          if (data[2]) {
            weapons = data[1];
          } else {
            items = data[1];
          }
        }
      }
      cacheItems();
    }
  };

  /**
   * Function to send a packet
   * @param {string} event - Event type
   * @param {*} e - Parameter e
   */
  function sendPacket(e) {
    // EXTRACT DATA ARRAY:
    let t = Array.prototype.slice.call(arguments, 1);
    // SEND MESSAGE:
    ws.send(window.msgpack.encode([e, t]));
  }

  // PLACE:
  /**
   * Function to place an item
   * @param {number} event - Event type
   * @param {number} ang - Angle
   */
  const place = (id, ang) => {
    sendPacket("G", id, false);
    hit();
    slectWeapons();
  };
  const slectWeapons = () => {
    sendPacket("G", weapons[0], true);
  };
  const hit = (id, ang) => {
    sendPacket("d", 1, ang);
    sendPacket("d", 0, ang);
  };

  // ITEM GROUPS/WEAPONS:
  /**
   * Cache the player's items
   */
  const cacheItems = () => {
    const categories = [{
      category: 'primary',
      start: 0,
      end: 8
    }, {
      category: 'secondary',
      start: 9,
      end: 15
    }, {
      category: 'food',
      start: 16,
      end: 18
    }, {
      category: 'wall',
      start: 19,
      end: 21
    }, {
      category: 'spike',
      start: 22,
      end: 25
    }, {
      category: 'mill',
      start: 26,
      end: 28
    }, {
      category: 'mine',
      start: 29,
      end: 30
    }, {
      category: 'boostPad',
      start: 31,
      end: 32
    }, {
      category: 'trap',
      start: 31,
      end: 32
    }, {
      category: 'turret',
      start: 29,
      end: 30
    }, {
      category: 'spawnpad',
      start: 36,
      end: 36
    }];
    categories.forEach(category => {
      for (let i = category.start; i <= category.end; i++) {
        const element = document.getElementById(`actionBarItem${i}`);
        if (element !== null && element.offsetParent !== null) {
          inventory[category.category] = i - 16;
        }
      }
    });
  };
  var repeater = function (key, action, interval) {
    let _isKeyDown = false;
    let _intervalId;
    return {
      start(keycode) {
        if (keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
          _isKeyDown = true;
          if (_intervalId === undefined) {
            _intervalId = setInterval(() => {
              action();
              if (!_isKeyDown) {
                clearInterval(_intervalId);
                _intervalId = undefined;
              }
            }, interval);
          }
        }
      },
      stop(keycode) {
        if (keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
          _isKeyDown = false;
        }
      }
    };
  };
  const millPlacer = repeater(78, () => {
    place(inventory.mill);
  }, 100);
  const turretPlacer = repeater(72, () => {
    place(inventory.turret);
  }, 100);
  const spikePlacer = repeater(86, () => {
    place(inventory.spike);
  }, 100);
  const trapPlacer = repeater(70, () => {
    place(inventory.trap);
  }, 100);
  const foodPlacer = repeater(81, () => {
    place(inventory.food);
  }, 100);
  window.unsafeWindow.addEventListener('keydown', function (e) {
    foodPlacer.start(e.keyCode);
    millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);
    spikePlacer.start(e.keyCode);
    trapPlacer.start(e.keyCode);
  });
  window.unsafeWindow.addEventListener('keyup', e => {
    millPlacer.stop(e.keyCode);
    foodPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    spikePlacer.stop(e.keyCode);
    trapPlacer.stop(e.keyCode);
  });
  // Override WebSocket's send method
  document.msgpack = window.msgpack;
  WebSocket.prototype.oldSend = WebSocket.prototype.send;
  WebSocket.prototype.send = function (event) {
    ws = ws || this;
    ws.addEventListener("message", hookWS);
    this.oldSend(event);
  };
})();
